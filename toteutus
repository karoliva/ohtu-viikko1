			Toteutusdokumentti
Ohjelma koostuu luokista AVLpuu, Arpoja, Binaarihakupuu, Jono, Lapikulut, Punamustapuu, Solmu, Tekstikayttoliittyma ja Triepuu sekä rajapinnasta Kayttoliittyma. Binaarihakupuu-luokka toimii yläluokkana AVL-puu-, Punamustapuu- ja Triepuu-luokille, joista kaksi ensimmäistä käyttävät lisäysmetodeissaan Binaarihakupuun lisäysmetodia. AVL-puu-, Punamustapuu- ja Trie-luokka luovat luokkansa nimen mukaisen puun. Arpoja-luokka arpoo Integer-tyyppisiä lukuja puita varten. Jono-luokka luo jonon, johon lukuja laitetaan leveyssuuntaista läpikäyntiä varten. Lapikulut-luokassa on kaikki läpikäynnit puita varten. Binaarihaku-, AVL- ja Punamustapuulle on kolme eri läpikäyntiä: leveyssuuntainen-, esi- ja sisäjärjestys. Triepuulle taas esijärjestys-, leveyssuuntainenjärjestysläpikäynti ja kaikki puussa olevat luvut tulostava läpikäynti. Solmu-luokka luo solmun ja sille tarvittavat atribuutit, mm. korkeus ja linkki vanhempaansa. Kayttoliittyma toimii Tekstikayttoliittyman rajapintana. Tekstikayttoliittyma hoitaa ilmoitusten ja kysymyksien tulostamisen.  
Binaarihakupuu-luokan lisäysmetodille saimme aikavaativuudeksi O(h), missä h on puun korkeus. Lisäysmetodi voi pahimmillaan viedä solmun puun alimmalle tasolle. Tilavaativuudeksi saimme O(1), koska metodissa ei käytetä rekursiota ja on vain muutama muuttuja.
AVLpuu-luokan lisäysmetodin aikavaativuudeksi tuli O(log n), missä n on puun solmujen lukumäärä. Lisäysmetodi suorittaa pahimmillaan kaksi kertaa kierto-operaation, jotka ovat aikavaativuudeltaan O(1). Se saattaa myös joutua kulkemaan lisätystä solmusta juureen asti etsiessään epätasapainoa, mutta tämäkin vie O(log n) verran aikaa. Tilavaativuus on myös   O(1), koska se käyttää Binaarihakupuun lisäysmetodia, jonka tilavaativuus oli O(1) ja muutenkin se käyttää vain vakiomäärän apumuuttujia.  
Punamustapuu-luokan lisäysmetodin aikavaativuus on myös O(log n), missä n on solmujen lukumäärä. Lisäysmetodin käyttämät kiertometodit vievät O(1) verran aikaa, Binaarihakupuun lisäysmetodi vie O(h) aikaa ja palauttaessaan puunsa tasapainoa, metodi pahimmassa tapauksessa joutuu menemään juureen asti, joka vie aikaa O(log n). Tilavaativuus on O(1), koska metodissa ei ole rekursiota ja siinä on vakiomäärä apumuuttujia.
Triepuu-luokan lisäysmetodin aikavaativuus on O(n^2), missä n on lisättävän luvun merkkipituus. Lisäysmetodissa käydään luku läpi, joka vie aikaa O(n) verran ja pahimmassa tapauksessa, jossa luku on jo puussa, käydään puu läpi , joka vie aikaa O(n), koska jokaisen solmun lapset on tallennettu Solmu-tyyppiseen taulukkoon, joka käydään läpi for-loopilla. Tilavaativuus on O(1), koska metodissa ei ole rekursiota ja siinä on vakiomäärä apumuuttujia.
Binaarihaku-, AVL-, ja Punamustapuun esi- ja sisäjärjestysläpikäynnin aikavaativuus on O(n), missä n on solmujen lukumäärä, koska metodien runko on vakioaikainen ja kaikki solmut käydään läpi.  Tilavaativuus on O(h), missä h on puun korkeus, koska rekursiopinon korkeus on pahimmillaan puun korkeus. Leveyssuuntaisenläpikäynnin aikavaativuus on O(n), missä n on solmujen lukumäärä jonossa, koska jonon metodit vievät aikaa O(1) ja while-looppia käydään läpi niin kauan kuin jonossa on solmuja. Tilavaativuus taas on O(1), koska apumuuttujia on vakiomäärä eikä ole rekursiota.
Triepuun leveyssuuntainenläpikäynnin aikavaativuus on O(n^2), missä n on solmujen lukumäärä jonossa. Jonon metodit vievät aikaa O(1) ja  while-looppia käydään läpi niin kauan kuin jonossa on solmuja ja while-loopin sisällä on for-looppi, joka käy läpi jonosta otetun solmun lapset, jotka ovat Solmu-tyyppisessä taulukossa ja lisää ne jonoon. Tilavaativuus taas on O(1), koska apumuuttujia on vakiomäärä eikä ole rekursiota. Trienluvut-metodin, joka tulostaa kaikki puun luvut, aikavaativuus on O(n^2), missä n on solmujen lukumäärä jonossa.  Jonon metodit vievät aikaa O(1) ja  while-looppia käydään läpi niin kauan kuin jonossa on solmuja ja while-loopin sisällä on while-looppi ja kaksi for-looppia. Tilavaativuus taas on O(1), koska apumuuttujia on vakiomäärä eikä ole rekursiota.  Triepuu esijärjestysläpikäynnin aikavaativuus on O(n), missä n on solmujen lukumäärä,  koska metodien runko on vakioaikainen ja kaikki solmut käydään läpi. Tilavaativuus on         O(n^2), koska pahimmillaan rekursiopinossa voi olla solmun kaikkien lapsien lapset.  



Ohjelman yleisrakenne
Saavutetut aika- ja tilavaativuudet (m.m. O-analyysi pseudokoodista)
Suorituskyky- ja O-analyysivertailu (mikäli työ vertailupainotteinen)
Työn mahdolliset puutteet ja parannusehdotukset
Lähteet
